package configitems

import (
	"context"
	"errors"
	"fmt"
	"net"
	"os"

	"github.com/lf-edge/eve/libs/depgraph"
	log "github.com/sirupsen/logrus"
)

const (
	// resolvConfFilename : path to resolv.conf managed by SDN Agent.
	resolvConfFilename = "/etc/resolv.conf"
)

// ResolvConf : a singleton item representing resolv.conf.
type ResolvConf struct {
	DNSServers []net.IP
}

// Name
func (r ResolvConf) Name() string {
	return singletonName
}

// Label
func (r ResolvConf) Label() string {
	return "resolv.conf"
}

// Type
func (r ResolvConf) Type() string {
	return ResolvConfTypename
}

// Equal compares the list of DNS servers.
func (r ResolvConf) Equal(other depgraph.Item) bool {
	r2 := other.(ResolvConf)
	if len(r.DNSServers) != len(r2.DNSServers) {
		return false
	}
	for i := range r.DNSServers {
		if !r.DNSServers[i].Equal(r2.DNSServers[i]) {
			return false
		}
	}
	return true
}

// External returns false.
func (r ResolvConf) External() bool {
	return false
}

// String prints all DNS entries of the resolv.conf.
func (r ResolvConf) String() string {
	if len(r.DNSServers) == 0 {
		return "resolv.conf with empty content"
	}
	return fmt.Sprintf("resolv.conf with DNS entries: %v", r.DNSServers)
}

// Dependencies returns nothing.
func (r ResolvConf) Dependencies() (deps []depgraph.Dependency) {
	return nil
}

// ResolvConfConfigurator implements Configurator for resolv.conf.
type ResolvConfConfigurator struct{}

// Create writes resolv.conf.
func (c *ResolvConfConfigurator) Create(ctx context.Context, item depgraph.Item) error {
	return c.generateResolvConf(item.(ResolvConf))
}

// Modify writes updated resolv.conf.
func (c *ResolvConfConfigurator) Modify(ctx context.Context, oldItem, newItem depgraph.Item) (err error) {
	return c.generateResolvConf(newItem.(ResolvConf))
}

func (c *ResolvConfConfigurator) generateResolvConf(config ResolvConf) error {
	destfile, err := os.Create(resolvConfFilename)
	if err != nil {
		err = fmt.Errorf("failed to create resolv.conf: %v", err)
		log.Error(err)
		return err
	}
	defer destfile.Close()
	if _, err = destfile.WriteString("# Generated by SDN Agent\n"); err != nil {
		log.Error(err)
		return err
	}
	if _, err = destfile.WriteString("# Do not edit\n"); err != nil {
		log.Error(err)
		return err
	}
	for _, server := range config.DNSServers {
		_, err = destfile.WriteString(
			fmt.Sprintf("nameserver %s\n", server))
		if err != nil {
			log.Error(err)
			return err
		}
	}
	if _, err = destfile.WriteString("options rotate\n"); err != nil {
		log.Error(err)
		return err
	}
	if _, err = destfile.WriteString("options attempts:5\n"); err != nil {
		log.Error(err)
		return err
	}
	if err = destfile.Sync(); err != nil {
		log.Error(err)
		return err
	}
	return nil
}

// Delete always returns error. SDN agent never reverts back to the original content of resolv.conf.
func (c *ResolvConfConfigurator) Delete(ctx context.Context, item depgraph.Item) error {
	return errors.New("not implemented")
}

// NeedsRecreate returns false - Modify is able to apply any change.
func (c *ResolvConfConfigurator) NeedsRecreate(oldItem, newItem depgraph.Item) (recreate bool) {
	return false
}
