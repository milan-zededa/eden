{{$test_opts := "-test.v -timewait 20m"}}

[!exec:curl] stop
[!exec:cut] stop
[!exec:grep] stop

# eden -t 1s pod ps

# Starting of reboot detector with a 2 reboots limit
! test eden.reboot.test {{$test_opts}} -reboot=0 -count=2 &

# Run by docker's actor
test eden.docker.test {{$test_opts}} -test.run TestDockerStart -name t1 -externalPort 8027 -memory 300M
stdout '--- PASS: TestDockerStart'
test eden.docker.test {{$test_opts}} -test.run TestDockerStart -name t2 -externalPort 8028 -memory 300M
stdout '--- PASS: TestDockerStart'

# Dockers detecting
eden -t 1m pod ps
cp stdout pod_ps
grep '^t1\s*' pod_ps
grep '^t2\s*' pod_ps

# nginx detecting
exec -t 1m bash get.sh t1
stdout 'Welcome to nginx'
exec -t 1m bash get.sh t2
stdout 'Welcome to nginx'

# Stop by docker's actor
test eden.docker.test {{$test_opts}} -test.run TestDockerDelete -name t1
stdout '--- PASS: TestDockerDelete'
test eden.docker.test {{$test_opts}} -test.run TestDockerDelete -name t2
stdout '--- PASS: TestDockerDelete'

# Dockers detecting
eden -t 1m pod ps
! stdout '^t[12]'

# Test's config. file
-- eden-config.yml --
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}

-- get.sh --
EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
PORT=`grep "^$1"'\s*' pod_ps | awk '{print $5}' | cut -d ":" -f 2`
$EDEN sdn fwd eth0 $PORT -- curl FWD_IP:FWD_PORT