[!exec:bash] stop
[!exec:grep] stop
[!exec:cat] stop
[!exec:curl] stop

# This test deploys phoronix test app into EVE, performs the test and shows the result
# You can set one of the benchmarks via the argument "benchmark": pts/coremark-1.0.0 pts/compress-7zip-1.7.1 pts/go-benchmark-1.1.4 pts/java-scimark2-1.1.2 pts/fio-1.13.2 pts/encode-mp3-1.7.4 pts/osbench-1.0.1 pts/perl-benchmark-1.0.1 pts/phpbench-1.1.5 pts/pybench-1.1.3 pts/sqlite-2.1.0 pts/t-test1-1.0.1 pts/openssl-1.11.0
# For example: ./eden test tests/phoronix/ -v debug -a="benchmark=pts/coremark-1.0.0"

arg benchmark benchmark

# read the environment variables
source .env

# deploy the application by nested escript
test eden.escript.test -test.run TestEdenScripts/deploy_app -test.v  -testdata {{EdenConfig "eden.tests"}}/phoronix/testdata/

exec -t 180m bash wait_app.sh
exec cat result
# expect in stdout
stdout 'Average'
stdout 'Deviation'

# teardown applications
eden pod delete app1

# Test's config file
-- eden-config.yml --
test:
    controller: adam://{{EdenConfig "adam.ip"}}:{{EdenConfig "adam.port"}}
    eve:
      {{EdenConfig "eve.name"}}:
        onboard-cert: {{EdenConfigPath "eve.cert"}}
        serial: "{{EdenConfig "eve.serial"}}"
        model: {{EdenConfig "eve.devmodel"}}

-- .env --
name=app1
external_port=-p 8027:80

-- wait_app.sh --
#!/bin/sh

echo "waiting for app running state"

EDEN={{EdenConfig "eden.root"}}/{{EdenConfig "eden.bin-dist"}}/{{EdenConfig "eden.eden-bin"}}
until $EDEN pod ps | grep app1 | grep RUNNING; do sleep 5; done

echo "sleep for 60 seconds"
sleep 60

echo "waiting for the test results"

until $EDEN sdn fwd eth0 8027 -- curl -s FWD_IP:FWD_PORT -o result; do sleep 30; done